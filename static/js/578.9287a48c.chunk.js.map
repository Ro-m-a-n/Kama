{"version":3,"file":"static/js/578.9287a48c.chunk.js","mappings":"uLAeA,EAZe,SAACA,GACd,OACE,iBAAKC,UAAU,sBAAf,WACE,SAAC,KAAD,CAASA,UAAU,sBAAsBC,GAAE,oBAAeF,EAAMG,IAAhE,UACE,gBAAKF,UAAU,SAASG,IAAI,GAAGC,IAAKL,EAAMM,kBAG5C,SAAC,KAAD,CAASJ,GAAE,oBAAeF,EAAMG,IAAhC,SAAuCH,EAAMO,SAGlD,E,UCSD,EApBgB,SAACP,GAEf,OACE,iBAAKC,UAAS,0BAAqBD,EAAMQ,aAA3B,KAAd,WACE,gBACEP,UAAU,SACVG,IAAI,GACJC,IAAKL,EAAMS,SAEb,gBAAKR,UAAU,UAAf,SAA0BD,EAAMU,QAChC,SAAC,MAAD,CACET,UAAU,oBACVU,QAAS,WACPX,EAAMY,gBAAgBZ,EAAMa,SAAUb,EAAMc,UAC7C,MAIR,E,2DCoEGC,GAAsBC,EAAAA,EAAAA,GAAU,CAClCC,KAAM,oBADkBD,CAEvBE,EAAAA,GAEH,GAAeC,EAAAA,EAAAA,KAAf,EArEqC,SAACnB,GACpC,IAAIoB,EAAepB,EAAMqB,YAAYC,OAAOT,UAAY,EACxD,GAAgDU,EAAAA,EAAAA,UAAS,GAAzD,eAAOC,EAAP,KAAyBC,EAAzB,KAMIC,EAAkB1B,EAAM2B,QAAQC,KAAI,SAACC,GAAD,OACtC,QAAC,EAAD,CACEtB,KAAMsB,EAAGtB,KACTJ,GAAI0B,EAAGhB,SAEPP,aAAcuB,EAAGvB,cADZuB,EAAGhB,SAJ4B,IASpCiB,EAAoB9B,EAAM2B,QAAQI,QACpC,SAACF,GAAD,OAAQA,EAAGhB,UAAYO,CAAvB,IAGEY,EAAkBF,EAAkB,GAAGG,QAAQL,KAAI,SAACK,GAClDA,EAAQnB,YAAcU,GACxBC,EAAoBD,EAAmB,GAgBzC,OACE,QAAC,EAAD,CACEd,KAAMuB,EAAQvB,KAEdG,SAAUO,EACVN,UAAWmB,EAAQnB,UACnBF,gBAAiBZ,EAAMY,gBACvBH,MAnBEwB,EAAQC,KACHlC,EAAMS,MAERqB,EAAkB,GAAGxB,aAiB1BE,aAdoB,WACtB,IAAIyB,EAAQC,KAGZ,MAAO,WACR,CASiBC,IALTF,EAAQnB,UAQlB,IAED,OACE,eAAKb,UAAU,UAAf,WACE,eAAKA,UAAU,iBAAf,SAAiCyB,KACjC,eAAKzB,UAAU,WAAWmC,GAAI,CAAEC,GAAI,WAApC,SACGL,KAEH,eAAK/B,UAAU,aAAamC,GAAI,CAAEC,GAAI,WAAtC,UACE,QAACtB,EAAD,CAAqBuB,SAxDV,SAACC,GAChBvC,EAAMwC,WAAWD,EAASN,QAASb,EAAcI,GAAkB,GACnExB,EAAMyC,UAASC,EAAAA,EAAAA,IAAM,oBACtB,EAqD8CC,WAAW,cAI3D,I,uCC9CD,GAAeC,EAAAA,EAAAA,KACbzB,EAAAA,EAAAA,KAxBoB,SAAC0B,GACrB,MAAO,CACLlB,QAASkB,EAAMC,aAAanB,QAC5BlB,MAAOoC,EAAME,YAAYtC,MAE5B,GAmB2D,CACxD+B,WAAAA,EAAAA,GACA5B,gBAAAA,EAAAA,KAEFoC,EAAAA,EACAC,EAAAA,EANF,EA3B8C,SAACjD,GAC7C,OAAO,SAAC,GAAD,UAAaA,GACrB,G","sources":["components/Pages/Dialogs/Dialog/Dialog.jsx","components/Pages/Dialogs/Message/Message.jsx","components/Pages/Dialogs/Dialogs.tsx","components/Pages/Dialogs/DialogsContainer.tsx"],"sourcesContent":["import \"./../Dialogs.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Dialog = (props) => {\r\n  return (\r\n    <div className=\"Dialogs_item active\">\r\n      <NavLink className=\"Dialog_item__avatar\" to={`/messages/${props.id}` }>\r\n        <img className=\"Avatar\" alt=\"\" src={props.dialogAvatar}></img>\r\n      </NavLink>\r\n\r\n      <NavLink to={`/messages/${props.id}`}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialog;\r\n","\r\nimport { TiDeleteOutline } from \"react-icons/ti\";\r\nconst Message = (props) => {\r\n  \r\n  return (\r\n    <div className={`post horisontal ${props.messagesSide} `}>\r\n      <img\r\n        className=\"Avatar\"\r\n        alt=\"\"\r\n        src={props.photo}\r\n      ></img>\r\n      <div className=\"message\">{props.text}</div>\r\n      <TiDeleteOutline\r\n        className=\"post_icon__delete\"\r\n        onClick={() => {\r\n          props.deleteMessageAC(props.dialogId, props.messageId);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import \"./Dialogs.css\";\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport Message from \"./Message/Message\";\r\nimport { useState } from \"react\";\r\nimport { reduxForm, reset } from \"redux-form\";\r\nimport { AddMessageForm } from \"./Message/AddMessage/AddMessage\";\r\nimport { connect } from \"react-redux\";\r\nimport { dialogsType } from \"../../../Redux/messageReducer\";\r\n/**@jsxImportSource theme-ui */\r\n\r\ntype propsType = {\r\n  dialogs: Array<dialogsType>;\r\n  photo: string;\r\n  addMessage: (\r\n    message: string,\r\n    dialogId: number,\r\n    messageId: number,\r\n    isMe: boolean\r\n  ) => void;\r\n  deleteMessageAC: (dialogId: number, messageId: number) => void;\r\n  dispatch: any;\r\n  routeParams: any;\r\n};\r\nconst Dialogs: React.FC<propsType> = (props) => {\r\n  let currentRoute = props.routeParams.params.dialogId || 1;\r\n  const [currentMessageId, setCurrentMessageId] = useState(2);\r\n  const onSubmit = (formData: any) => {\r\n    props.addMessage(formData.message, currentRoute, currentMessageId, true);\r\n    props.dispatch(reset(\"DialogAddMessage\"));\r\n  };\r\n\r\n  let dialogsElements = props.dialogs.map((el) => (\r\n    <Dialog\r\n      name={el.name}\r\n      id={el.dialogId}\r\n      key={el.dialogId}\r\n      dialogAvatar={el.dialogAvatar}\r\n    />\r\n  ));\r\n\r\n  let currentDialogData = props.dialogs.filter(\r\n    (el) => el.dialogId == currentRoute\r\n  );\r\n\r\n  let messageElements = currentDialogData[0].message.map((message) => {\r\n    if (message.messageId === currentMessageId) {\r\n      setCurrentMessageId(currentMessageId + 1);\r\n    }\r\n\r\n    let currentDialogAvatar = () => {\r\n      if (message.isMe) {\r\n        return props.photo;\r\n      }\r\n      return currentDialogData[0].dialogAvatar;\r\n    };\r\n\r\n    let currentDialogSide = () => {\r\n      if (message.isMe) {\r\n        return;\r\n      }\r\n      return \"rightSide\";\r\n    };\r\n    return (\r\n      <Message\r\n        text={message.text}\r\n        key={message.messageId}\r\n        dialogId={currentRoute}\r\n        messageId={message.messageId}\r\n        deleteMessageAC={props.deleteMessageAC}\r\n        photo={currentDialogAvatar()}\r\n        messagesSide={currentDialogSide()}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"Dialogs\">\r\n      <div className=\"Dialogs__items\">{dialogsElements}</div>\r\n      <div className=\"messages\" sx={{ bg: \"primary\" }}>\r\n        {messageElements}\r\n      </div>\r\n      <div className=\"addMessage\" sx={{ bg: \"primary\" }}>\r\n        <AddMessageReduxForm onSubmit={onSubmit} full_widht=\"widht\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nlet AddMessageReduxForm = reduxForm({\r\n  form: \"DialogAddMessage\",\r\n})(AddMessageForm);\r\n\r\nexport default connect()(Dialogs);\r\n","import Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../../hok/withAuthRedirect\";\r\nimport {\r\n  addMessage,\r\n  deleteMessageAC,\r\n  dialogsType,\r\n} from \"../../../Redux/messageReducer\";\r\nimport withRouter from \"../../../hok/withRouter\";\r\nimport { appStateType } from \"../../../Redux/reduxStore.js\";\r\n\r\ntype propsType = MSPT & MDPT & OwnPT;\r\nconst DialogsContainer: React.FC<propsType> = (props) => {\r\n  return <Dialogs {...props} />;\r\n};\r\n\r\nlet mapStateToProps = (state: appStateType): MSPT => {\r\n  return {\r\n    dialogs: state.messagesPage.dialogs,\r\n    photo: state.profilePage.photo,\r\n  };\r\n};\r\n\r\ntype MSPT = {\r\n  dialogs: Array<dialogsType>;\r\n  photo: string;\r\n};\r\ntype MDPT = {\r\n  addMessage: (\r\n    message: string,\r\n    dialogId: number,\r\n    messageId: number,\r\n    isMe: boolean\r\n  ) => void;\r\n\r\n  deleteMessageAC: (dialogId: number, messageId: number) => void;\r\n};\r\ntype OwnPT = { routeParams: object };\r\n\r\nexport default compose<propsType>(\r\n  connect<MSPT, MDPT, OwnPT, appStateType>(mapStateToProps, {\r\n    addMessage,\r\n    deleteMessageAC,\r\n  }),\r\n  withAuthRedirect,\r\n  withRouter\r\n)(DialogsContainer);\r\n//<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n"],"names":["props","className","to","id","alt","src","dialogAvatar","name","messagesSide","photo","text","onClick","deleteMessageAC","dialogId","messageId","AddMessageReduxForm","reduxForm","form","AddMessageForm","connect","currentRoute","routeParams","params","useState","currentMessageId","setCurrentMessageId","dialogsElements","dialogs","map","el","currentDialogData","filter","messageElements","message","isMe","currentDialogSide","sx","bg","onSubmit","formData","addMessage","dispatch","reset","full_widht","compose","state","messagesPage","profilePage","withAuthRedirect","withRouter"],"sourceRoot":""}